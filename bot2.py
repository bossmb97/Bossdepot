import telebot
import sqlite3
import threading
import os
import time

# üõ†Ô∏è Configuration s√©curis√©e
TOKEN = "7037622732:AAGeUbwnxIPze-8IqXsApo6_KTfLttOhAes"  # Stocke ton token en variable d'environnement
ADMIN_ID = int(os.getenv("ADMIN_TELEGRAM_ID", 7555089736))  # ID admin

bot = telebot.TeleBot(TOKEN)
lock = threading.Lock()

# üìå Fonction pour g√©rer la connexion SQLite (√©vite les acc√®s concurrents)
def get_db_connection():
    return sqlite3.connect("balance.db", check_same_thread=False)

# üìå Cr√©ation des tables si elles n'existent pas
with get_db_connection() as conn:
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS account (
            id INTEGER PRIMARY KEY,
            balance REAL DEFAULT 0.0,
            bonus REAL DEFAULT 0.0
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount REAL,
            status TEXT DEFAULT 'pending'
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            amount REAL,
            date TEXT DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("INSERT OR IGNORE INTO account (id, balance) VALUES (1, 0.0)")
    conn.commit()

# üîç Fonction pour r√©cup√©rer le solde
def get_balance():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM account WHERE id = 1")
        return cursor.fetchone()[0]
        
        
# üîç Fonction pour r√©cup√©rer le bonus
def get_bonus():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT bonus FROM account WHERE id = 1")
        return cursor.fetchone()[0]

# üîÑ Fonction pour mettre √† jour le solde apr√®s une transaction
def update_balance(amount):
    with lock:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT balance FROM account WHERE id = 1")
            current_balance = cursor.fetchone()[0]
            new_balance = current_balance - amount
            if new_balance < 0:
                return False
            cursor.execute("UPDATE account SET balance = ? WHERE id = 1", (new_balance,))
            conn.commit()
            return True

# üîÑ Fonction pour ajouter du solde
def add_balance(amount):
    with lock:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE account SET balance = balance + ? WHERE id = 1", (amount,))
            cursor.execute("INSERT INTO history (amount) VALUES (?)", (amount,))
            conn.commit()

# üìå Commande pour afficher le solde
@bot.message_handler(commands=['solde'])
def check_balance(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå Seul l'admin peut voir le solde.")
        return
    balance = get_balance()
    bot.reply_to(message, f"üí∞ Solde actuel : {balance:.2f} DA")



# üìå Commande pour afficher le bonus
@bot.message_handler(commands=['bonus'])
def check_bonus(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå Seul l'admin peut voir le bonus.")
        return
    bonus = get_bonus()
    bot.reply_to(message, f"üí∞ Bonus actuel : {bonus:.2f} DA")
    
# üìå Commande pour envoyer une demande de paiement
@bot.message_handler(commands=['demande'])
def request_payment(message):
    try:
        parts = message.text.split()
        user_id = message.chat.id
        amount = float(parts[1])
        if amount <= 0:
            raise ValueError

        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT status FROM transactions WHERE status = 'pending'")
            existing_request = cursor.fetchone()
            
            if existing_request:
                bot.reply_to(message, "‚ùå Une demande en attente.")
                return
            
            cursor.execute("INSERT INTO transactions (user_id, amount, status) VALUES (?, ?, 'pending')", (user_id, amount))
            conn.commit()

        bot.send_message(ADMIN_ID, f"üì¢ Nouvelle demande de paiement\nüë§ ID : {user_id}\nüí∞ Montant : {amount:.2f} DA\n üåü Bonus : {0.01*amount:.2f} DA\n"
                                   f"üëâ R√©ponds avec /valider pour confirmer.\n"
                                   f"üëâ R√©ponds avec /annuler pour annuler.")
        bot.reply_to(message, "‚úÖ Demande envoy√©e √† l'admin. Attends la confirmation ou annule avec /annuler.")
    
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå Utilisation incorrecte. Exemple : /demande 200")

# üìå Commande pour valider une transaction  

@bot.message_handler(commands=['valider'])
def confirm_payment(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå Seul l'admin peut valider les transactions.")
        return

    try:
        with lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()

                # R√©cup√©rer la premi√®re transaction en attente
                cursor.execute("SELECT id, user_id, amount FROM transactions WHERE status = 'pending' ")
                transaction = cursor.fetchone()

                if not transaction:
                    bot.reply_to(message, "‚ùå Aucune transaction en attente.")
                    return

                transaction_id, user_id, amount = transaction
                bot.reply_to(message, f"üìå Transaction trouv√©e : ID {transaction_id}, Utilisateur {user_id}, Montant {amount:.2f} DA")
# V√©rifier le solde de l'admin
                admin_balance = get_balance()
                admin_bonus = get_bonus()
                
                if admin_balance < amount:
                    bot.reply_to(message, "‚ùå Solde insuffisant !")
                    return  # Ajout du return pour √©viter l'erreur d'indentation
                else    : 
                     # Si le solde est suffisant, mise √† jour du statut et du solde
                     newbalance =admin_balance-amount
                     newbonus = admin_bonus +0.01*amount
                     
                     
                     cursor.execute("UPDATE account SET balance = ? WHERE id = 1", (newbalance,))
                     conn.commit()
                     
                     
                     cursor.execute("UPDATE account SET bonus = ? WHERE id = 1", (newbonus,))
                     conn.commit()
                    
                                                 
                cursor.execute("UPDATE transactions SET status = 'approved' WHERE id = ?", (transaction_id,))
                conn.commit()
                
                bot.send_message(user_id, f"‚úÖ Paiement de {amount:.2f} DA valid√© par l'admin.")
                bot.reply_to(message, f"‚úÖ Transaction valid√©e. Nouveau solde : {newbalance:.2f} DA \n Nouveau bonus :{newbonus:.2f} DA")

    except Exception as e:
        bot.reply_to(message, f"‚ùå Erreur : {str(e)}")
        print("Erreur :", e)
  
# üìå Commande pour annuler une demande en attente
@bot.message_handler(commands=['annuler'])
def cancel_request(message):
    user_id = message.chat.id
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM transactions WHERE  status = 'pending' " )
        transaction = cursor.fetchone()
        
        if not transaction:
            bot.reply_to(message, "‚ùå Aucune demande en attente √† annuler.")
            return
        
        cursor.execute("UPDATE transactions SET status = 'canceled' WHERE id = ?", (transaction[0],))
        conn.commit()
    
    bot.reply_to(message, "‚úÖ Votre demande de paiement a √©t√© annul√©e.")
    bot.send_message(ADMIN_ID, f"‚ö†Ô∏è Demande de paiement annul√©e\nüë§ ID : {user_id}")
# pour ajouter du solde (admin uniquement)
@bot.message_handler(commands=['addsolde'])
def add_solde(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå Seul l'admin peut ajouter du solde.")
        return

    try:
        parts = message.text.split()
        amount = float(parts[1])
        if amount <= 0:
            raise ValueError

        add_balance(amount)
        bot.reply_to(message, f"‚úÖ {amount:.2f} DA ajout√©s au solde.\nüí∞ Nouveau solde : {get_balance():.2f} DA")
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå Utilisation incorrecte. Exemple : /addsolde 500")

# üìå Commande pour ajouter du solde (admin uniquement)
@bot.message_handler(commands=['addsolde'])
def add_solde(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå Seul l'admin peut ajouter du solde.")
        return

    try:
        parts = message.text.split()
        amount = float(parts[1])
        if amount <= 0:
            raise ValueError

        add_balance(amount)
        bot.reply_to(message, f"‚úÖ {amount:.2f} DA ajout√©s au solde.\nüí∞ Nouveau solde : {get_balance():.2f} DA")

    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå Utilisation incorrecte. Exemple : /addsolde 500")

# üìå Commande pour afficher l'historique des 10 derniers ajouts de solde
@bot.message_handler(commands=['historique'])
def view_history(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå Seul l'admin peut voir l'historique.")
        return
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT amount, date FROM history ORDER BY id DESC LIMIT 10")
        history = cursor.fetchall()
    if not history:
        bot.reply_to(message, "üìú Aucun ajout de solde enregistr√©.")
    else:
        history_text = "üìú *Historique des 10 derniers ajouts de solde :*\n"
        for entry in history:
            history_text += f"üí∞ {entry[0]:.2f} DA - üïí {entry[1]}\n"

        bot.reply_to(message, history_text, parse_mode="Markdown")

# üìå Commande pour afficher l'historique des 10 derniers transactions
@bot.message_handler(commands=['transactions'])
def view_history(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå Seul l'admin peut voir l'historique.")
        return
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, amount from TRANSACTIONS ORDER BY id DESC LIMIT 10")
        history = cursor.fetchall()
    if not history:
        bot.reply_to(message, "üìú Aucune transaction enregistr√©e.")
    else:
        history_text = "üìú *Historique des 10 derni√®res transactions :*\n"
        for entry in history:
            history_text += f"üí∞ {entry[0]:}  - üïí {entry[1]} DA\n"

        bot.reply_to(message, history_text, parse_mode="Markdown")
        
        # üìå Commande /help pour afficher toutes les commandes disponibles
@bot.message_handler(commands=['help'])
def help_command(message):
    if message.chat.id == ADMIN_ID:
        help_text = """üìå *Commandes Admin :*
üîπ /solde - Afficher le solde total
üîπ /bonus - Afficher le bonus total
üîπ /valider <ID> <montant> - Valider une transaction
üîπ /addsolde <montant> - Ajouter du solde
üîπ /historique - Voir l‚Äôhistorique des ajouts de solde
üîπ /transactions - Voir l‚Äôhistorique des transactions effectu√©es

üîπ /reset - R√©initialiser le solde
üîπ /help - Voir cette aide"""
    else:
        help_text = """üìå *Commandes Utilisateur :*
üîπ /demande <montant> - Envoyer une demande de paiement
üîπ /help - Voir cette aide"""

    bot.reply_to(message, help_text, parse_mode="Markdown")

# üìå Commande pour r√©initialiser le solde
@bot.message_handler(commands=['reset'])
def reset_balance(message):
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå Seul l'admin peut r√©initialiser le solde.")
        return

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE account SET balance = 0.0 WHERE id = 1")
        conn.commit()
    bot.reply_to(message, "üîÑ Solde r√©initialis√© √† 0 DA.")

# üìå R√©ponse pour les commandes inconnues
@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    bot.reply_to(message, "‚ùå Commande inconnue. Utilise /solde, /demande, /valider, /addsolde, /historique ou /reset.")

# üöÄ Lancement s√©curis√© du bot avec gestion des erreurs
print("Bot en cours d'ex√©cution...")

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Erreur : {e}")
        time.sleep(5)  # Attente avant de red√©marrer le bot